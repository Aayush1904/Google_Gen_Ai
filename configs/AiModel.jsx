const {
  GoogleGenerativeAI,
} = require("@google/generative-ai");

const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
  model: "gemini-2.0-flash-exp",
});

const generationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40,
  maxOutputTokens: 8192,
  responseMimeType: "application/json",
};


  export const GeneratePathLayout_AI = model.startChat({
    generationConfig,
    history: [
      {
        role: "user",
        parts: [
          {text: "Generate A Learning Path on Following details with field as Path Name , Description , Along with chapter Name , about , Duration : Category : 'Programming' , Topic : 'Machine Learning' , Level : 'Advance', Duration: 1hour , NoOfChapters : 10, in JSON fromat "},
        ],
      },
      {
        role: "model",
        parts: [
          {text: "```json\n{\n  \"learningPath\": {\n    \"pathName\": \"Advanced Machine Learning Mastery\",\n    \"description\": \"A comprehensive learning path designed to elevate your machine learning skills to an advanced level. This path covers complex algorithms, techniques, and best practices for building sophisticated models.\",\n     \"category\": \"Programming\",\n     \"topic\": \"Machine Learning\",\n     \"level\": \"Advance\",\n     \"totalDuration\": \"10 hours\",\n    \"chapters\": [\n      {\n        \"chapterName\": \"Advanced Regression Techniques\",\n        \"about\": \"Explore advanced regression models like polynomial regression, regularization techniques (L1, L2), and robust regression. Learn to handle non-linear relationships and overfitting.\",\n        \"duration\": \"1 hour\"\n      },\n      {\n        \"chapterName\": \"Ensemble Methods: Boosting\",\n         \"about\": \"Dive deep into boosting algorithms like AdaBoost, Gradient Boosting Machines (GBM), and XGBoost. Understand their principles, implementation, and optimization strategies.\",\n         \"duration\": \"1 hour\"\n      },\n       {\n        \"chapterName\": \"Ensemble Methods: Bagging and Random Forests\",\n         \"about\": \"Learn about bagging techniques and understand how Random Forests work. Explore their advantages and limitations, and apply them to various datasets.\",\n          \"duration\": \"1 hour\"\n      },\n      {\n        \"chapterName\": \"Dimensionality Reduction: PCA and t-SNE\",\n         \"about\": \"Study Principal Component Analysis (PCA) and t-Distributed Stochastic Neighbor Embedding (t-SNE) for dimensionality reduction and visualization. Understand their mathematical foundations and use cases.\",\n         \"duration\": \"1 hour\"\n      },\n       {\n         \"chapterName\": \"Advanced Clustering Algorithms\",\n         \"about\": \"Explore advanced clustering methods like DBSCAN, hierarchical clustering, and Gaussian Mixture Models (GMM). Learn to select the appropriate algorithm for different datasets.\",\n         \"duration\": \"1 hour\"\n       },\n      {\n        \"chapterName\": \"Deep Learning Fundamentals with Neural Networks\",\n        \"about\": \"Build a strong foundation in neural networks. Cover topics like forward and backpropagation, activation functions, loss functions, and optimizers. Focus on building deep learning intuition.\",\n        \"duration\": \"1 hour\"\n      },\n      {\n         \"chapterName\": \"Convolutional Neural Networks (CNNs)\",\n         \"about\": \"Learn about the architecture and applications of CNNs for image recognition and other tasks. Understand convolutional layers, pooling layers, and common CNN architectures.\",\n         \"duration\":\"1 hour\"\n      },\n      {\n        \"chapterName\": \"Recurrent Neural Networks (RNNs) and LSTMs\",\n         \"about\": \"Study RNNs and Long Short-Term Memory (LSTM) networks for sequence data. Cover concepts like time series prediction, natural language processing (NLP) applications and implementation details.\",\n         \"duration\": \"1 hour\"\n      },\n      {\n        \"chapterName\": \"Model Evaluation and Hyperparameter Tuning\",\n         \"about\":\"Understand advanced model evaluation metrics, cross-validation techniques, and hyperparameter tuning using grid search, random search, and Bayesian optimization.\",\n        \"duration\": \"1 hour\"\n      },\n      {\n        \"chapterName\": \"Model Deployment and Monitoring\",\n         \"about\": \"Explore best practices for model deployment in production environments. Learn about model versioning, monitoring, and maintaining machine learning models in real-world scenarios.\",\n         \"duration\": \"1 hour\"\n      }\n    ]\n  }\n}\n```\n"},
        ],
      },
    ],
  });

  export const GenerateChapterContent_AI = model.startChat({
    generationConfig,
    history: [
      {
        role: "user",
        parts: [
          {text: "Explain the concept in Detail on Topic: How to Achieve Yoga thearpy in detail , Chapter : Foundations of Yoga Therapy, in JSON Format with list of array with field as title , description in detail , Code Example (Code field in <precode> fromat) if applicable\n"},
        ],
      },
      {
        role: "model",
        parts: [
          {text: "```json\n{\n  \"chapter\": \"Foundations of Yoga Therapy\",\n  \"topics\": [\n    {\n      \"title\": \"Understanding the Scope of Yoga Therapy\",\n      \"description\": \"Yoga therapy is a holistic approach that applies the principles and practices of yoga to address specific health conditions and promote overall well-being. It's not just about physical postures (asanas); it encompasses a wide range of techniques like breathwork (pranayama), meditation, mindfulness, lifestyle adjustments, and ethical considerations. Yoga therapy aims to empower individuals to manage their health conditions, reduce symptoms, improve functional capacity, and enhance their quality of life. It operates on the principle that imbalances in the physical, mental, emotional, and energetic bodies can contribute to disease, and that yoga practices can help restore balance and harmony.\",\n      \"code_example\": null\n    },\n    {\n      \"title\": \"The Therapeutic Relationship: The Client-Therapist Dynamic\",\n       \"description\": \"A strong therapeutic relationship is crucial in yoga therapy. It's a collaborative process built on trust, empathy, and mutual respect between the yoga therapist and the client. The therapist acts as a facilitator, guiding the client through practices tailored to their unique needs and challenges. Key elements of this relationship include: active listening, non-judgmental acceptance, confidentiality, clear communication, and empowering the client to take an active role in their healing journey. The therapist must also be mindful of ethical boundaries and cultural sensitivities.\",\n      \"code_example\": null\n    },\n    {\n       \"title\": \"Assessment in Yoga Therapy: A Holistic Approach\",\n      \"description\": \"Yoga therapy assessments are comprehensive and go beyond just physical evaluation. They consider the individual's physical health history, lifestyle, mental and emotional state, spiritual beliefs, and personal goals.  This often includes: Physical Assessment: Range of motion, posture, muscle imbalances, and pain assessment. Lifestyle Assessment: Diet, sleep patterns, daily routine, and stress levels. Mental and Emotional Assessment: Anxiety, depression, stress, and past traumas.  Spiritual Assessment: Values, beliefs, and sense of purpose.  Functional Capacity Assessment: Ability to perform daily tasks and activities.  Understanding the clientâ€™s limitations, strengths, and aspirations is crucial for creating an individualized therapy plan.\",\n      \"code_example\": null\n    },\n    {\n      \"title\": \"Individualized Treatment Planning: Tailoring Yoga to Specific Needs\",\n      \"description\": \"Based on the assessment, the yoga therapist develops a personalized treatment plan that addresses the client's specific condition and goals. This plan considers the client's abilities, limitations, and preferences.  It may include:  Specific Asana Modifications: Adjusting poses to accommodate physical limitations, injuries, or pain. Pranayama Techniques: Breathing exercises to regulate the nervous system, improve energy levels, and reduce stress. Meditation and Mindfulness Practices: Techniques to enhance mental clarity, reduce anxiety, and promote relaxation. Lifestyle Recommendations: Dietary advice, sleep hygiene tips, stress management techniques, and modifications to daily routines.  The plan is not static and is adjusted based on the client's progress and feedback.\",\n      \"code_example\": null\n     },\n    {\n        \"title\": \"The Role of the Eight Limbs of Yoga in Therapy\",\n        \"description\": \"The eight limbs of yoga, as outlined in Patanjali's Yoga Sutras, provide a framework for yoga therapy. Each limb contributes to overall well-being and is incorporated into the therapy process as appropriate:\\n\\n1. **Yamas (Ethical Restraints):** Principles like non-violence (ahimsa), truthfulness (satya), non-stealing (asteya), non-excess (brahmacharya), and non-possessiveness (aparigraha) support ethical conduct and promote inner peace.\\n2. **Niyamas (Observances):** Principles like purity (saucha), contentment (santosha), self-discipline (tapas), self-study (svadhyaya), and surrender to a higher power (ishvara pranidhana) nurture personal development.\\n3. **Asana (Physical Postures):** Gentle and modified poses tailored to individual needs to enhance flexibility, strength, balance, and body awareness.\\n4. **Pranayama (Breath Control):** Specific breathing techniques to regulate energy flow, calm the nervous system, and improve overall vitality.\\n5. **Pratyahara (Withdrawal of the Senses):** Practicing mindfulness to detach from sensory distractions and turn inward.\\n6. **Dharana (Concentration):** Focusing the mind on a single point to develop mental clarity and focus.\\n7. **Dhyana (Meditation):** Cultivating a state of deep absorption and inner peace.\\n8. **Samadhi (Union):** A state of profound interconnectedness and blissful awareness.\",\n        \"code_example\": null\n      },\n    {\n      \"title\": \"Adaptation and Modification of Yoga Techniques\",\n      \"description\": \"A core skill for a yoga therapist is the ability to modify and adapt traditional yoga techniques to suit the specific needs and limitations of each client.  This includes:\\n\\n*   **Asana Modifications:** Using props like blocks, bolsters, blankets, chairs, and walls to support the body in poses and reduce strain. Adjusting the depth and intensity of poses to accommodate pain or limited range of motion.\\n*   **Pranayama Adaptations:** Selecting appropriate breathing techniques based on the client's condition. For example, a client with anxiety might benefit from slow, deep breathing techniques, while a client with low energy might need invigorating breaths.\\n*   **Meditation Adaptations:** Choosing guided meditations or simple mindfulness practices based on the client's experience and mental state.\\n*   **Seating and Support:** Modifying seated postures to accommodate physical limitations, including using chairs or cushions.\\n   The yoga therapist should have a deep understanding of anatomy and biomechanics to make safe and effective adaptations.\",\n      \"code_example\": null\n     },\n      {\n      \"title\": \"The Importance of Observation and Feedback\",\n       \"description\": \"Throughout the yoga therapy process, the therapist closely observes the clientâ€™s responses to the practices, and asks for feedback from the client to ensure efficacy and comfort. Observation involves noting physical reactions, emotional changes, and any shifts in energy levels. Feedback sessions help the therapist to understand how the client is experiencing the practices, so adjustments can be made to optimize the therapeutic outcome. This dynamic process helps the client feel empowered, and helps the therapist to fine-tune the therapy.\",\n      \"code_example\": null\n    },\n     {\n      \"title\": \"Ethical Considerations in Yoga Therapy\",\n       \"description\": \"Yoga therapists must adhere to a strict code of ethics that protects clients and maintains the integrity of the therapeutic relationship.  Key ethical considerations include:\\n*   **Confidentiality:** Maintaining the privacy of client information and respecting their boundaries.\\n*   **Informed Consent:** Clearly explaining the therapy process and ensuring that the client understands and agrees to participate.\\n*   **Professional Boundaries:** Maintaining appropriate boundaries and avoiding dual relationships.\\n*   **Competence:** Continuously updating knowledge and skills to provide safe and effective therapy.\\n*   **Cultural Sensitivity:** Respecting the clientâ€™s cultural background and beliefs.\\n*   **Avoiding Harm:** Refraining from practices that could cause physical or emotional harm.\\n Adherence to ethical principles ensures a safe and respectful therapeutic experience for the client.\",\n      \"code_example\": null\n    },\n    {\n       \"title\": \"Progress Tracking and Outcome Evaluation\",\n      \"description\": \"Monitoring progress is essential in yoga therapy. It helps both the therapist and the client understand the effectiveness of the treatment plan. This can involve:  Tracking changes in physical symptoms, like pain levels or range of motion. Assessing improvements in mental and emotional well-being, such as anxiety and stress. Reviewing the clientâ€™s ability to perform daily activities.  Using questionnaires or self-assessment tools.  Comparing current state to initial goals. The data collected helps refine the treatment plan, and makes sure that the client is making meaningful progress toward their goals.\",\n      \"code_example\": null\n    },\n    {\n      \"title\": \"Integration of Yoga Therapy with Conventional Medicine\",\n      \"description\": \"Yoga therapy is often used in conjunction with conventional medical treatments. It can be a supportive therapy that complements medical care, enhancing overall healing and well-being. It's crucial for yoga therapists to communicate and collaborate with other healthcare professionals involved in the client's care. This interdisciplinary approach ensures that the client receives well-rounded and integrated care, and that each treatment complements the other, ultimately giving the client the best possible care.\",\n      \"code_example\": null\n    }\n  ]\n}\n```\n"},
        ],
      },
    ],
  });


  export const GenerateCourseLinks = model.startChat({
    generationConfig,
    history: [
      {
        role: "user",
        parts: [
          {text: " Suggest 5 relevant online courses for the topic: Web Dev\n\n    from Udemy and Coursera. Provide the course title, platform (Udemy or Coursera), \n    a short description, and a sample URL in JSON format."},
        ],
      },
      {
        role: "model",
        parts: [
          {text: "```json\n[\n  {\n    \"title\": \"The Complete 2023 Web Development Bootcamp\",\n    \"platform\": \"Udemy\",\n    \"description\": \"Learn HTML, CSS, JavaScript, Node.js, React, MongoDB and more!  A comprehensive course that takes you from zero to full-stack web developer, covering both front-end and back-end technologies.\",\n    \"url\": \"https://www.udemy.com/course/the-complete-web-development-bootcamp/\"\n  },\n  {\n    \"title\": \"Web Design for Everybody (Basics of Coding & Development)\",\n    \"platform\": \"Coursera\",\n    \"description\": \"A beginner-friendly specialization from the University of Michigan that teaches the fundamentals of web design, including HTML5, CSS3, and JavaScript.  Focuses on creating responsive and accessible websites.\",\n    \"url\": \"https://www.coursera.org/specializations/web-design\"\n  },\n  {\n    \"title\": \"JavaScript: Understanding the Weird Parts\",\n    \"platform\": \"Udemy\",\n    \"description\": \"Go beyond the basics of JavaScript and understand its core principles, prototypal inheritance, closures, and advanced JavaScript concepts. This course helps you write more effective and maintainable JavaScript code.\",\n    \"url\": \"https://www.udemy.com/course/understand-javascript/\"\n  },\n  {\n    \"title\": \"Front-End Web UI Frameworks and Tools: Bootstrap 4\",\n    \"platform\": \"Coursera\",\n    \"description\": \"Part of the Full Stack Web Development with React Specialization from The Hong Kong University of Science and Technology, this course focuses on using Bootstrap 4 to create responsive and visually appealing user interfaces.\",\n    \"url\": \"https://www.coursera.org/learn/front-end-frameworks\"\n  },\n  {\n    \"title\": \"Node.js, Express, MongoDB & More: The Complete Bootcamp 2023\",\n    \"platform\": \"Udemy\",\n    \"description\": \"Build powerful REST APIs with Node.js, Express, and MongoDB. Learn authentication, authorization, testing, and deployment strategies for creating scalable and secure back-end applications.\",\n    \"url\": \"https://www.udemy.com/course/nodejs-express-mongodb-bootcamp/\"\n  }\n]\n```\n"},
        ],
      },
    ],
  });

  export const GenerateChapterContentWithPastContent = model.startChat({
    generationConfig,
    history: [
      {
        role: "user",
        parts: [
          {text: "Use the following past learning content to enhance the new response:\n          Machine Learning in Advance \n          \n          Now explain the concept in detail on Topic: Machine learning, Chapter: Neural network"},
        ],
      },
      {
        role: "model",
        parts: [
          {text: "Okay, I understand. I'll leverage my knowledge of Machine Learning, specifically focusing on Neural Networks, to provide a detailed explanation.\n\nHere's a breakdown of the concept of Neural Networks in detail:\n\n**Neural Networks: A Deep Dive**\n\nNeural networks are a powerful class of machine learning algorithms inspired by the structure and function of the human brain. They are particularly effective at tasks involving pattern recognition, classification, and prediction, and form the basis of many modern AI applications.\n\n**1. The Basic Building Block: The Neuron (or Perceptron)**\n\n*   **Inspiration:** The biological neuron.\n*   **Components:**\n    *   **Inputs (x1, x2, ..., xn):** Represent data fed into the neuron. Each input is associated with a weight.\n    *   **Weights (w1, w2, ..., wn):**  Represent the strength of the connection between the input and the neuron. These are adjustable parameters that the network learns.  Positive weights indicate excitation, negative weights indicate inhibition.\n    *   **Bias (b):** A constant value added to the weighted sum of inputs.  It allows the neuron to activate even when all inputs are zero.  Think of it as a threshold or baseline activation level.\n    *   **Weighted Sum:**  The neuron calculates a weighted sum of its inputs: `z = (w1*x1) + (w2*x2) + ... + (wn*xn) + b`\n    *   **Activation Function (Ïƒ):** A non-linear function applied to the weighted sum `z`. This function introduces non-linearity into the model, allowing it to learn complex relationships. Common activation functions include:\n        *   **Sigmoid:**  Outputs a value between 0 and 1, often used in the output layer for binary classification.  `Ïƒ(z) = 1 / (1 + e^(-z))`\n        *   **ReLU (Rectified Linear Unit):** Outputs the input directly if it is positive, otherwise outputs zero.  `Ïƒ(z) = max(0, z)`.  Popular for hidden layers due to its computational efficiency and ability to mitigate the vanishing gradient problem.\n        *   **Tanh (Hyperbolic Tangent):** Outputs a value between -1 and 1. `Ïƒ(z) = (e^z - e^(-z)) / (e^z + e^(-z))`\n        *   **Softmax:**  Outputs a probability distribution over multiple classes.  Commonly used in the output layer for multi-class classification.\n\n*   **Output (a):** The output of the activation function: `a = Ïƒ(z)`\n\n**2. Network Architecture: Layers and Connections**\n\nNeural networks are organized into layers:\n\n*   **Input Layer:** Receives the raw input data. The number of neurons in the input layer corresponds to the number of features in the dataset.\n*   **Hidden Layers:**  One or more layers between the input and output layers. These layers perform non-linear transformations on the input data, learning increasingly complex features.  A network with multiple hidden layers is called a \"deep\" neural network. The number of hidden layers and the number of neurons in each hidden layer are hyperparameters that need to be tuned.\n*   **Output Layer:** Produces the final output of the network. The number of neurons in the output layer depends on the task:\n    *   **Regression:** One neuron (or multiple neurons for multi-dimensional regression).\n    *   **Binary Classification:** One neuron (representing the probability of belonging to one class).\n    *   **Multi-class Classification:**  One neuron per class, often with a softmax activation function to produce a probability distribution over the classes.\n\n**Connections (Edges):**  Neurons in adjacent layers are connected by weighted connections. The weights represent the strength of the connection between the neurons.\n\n**3. Forward Propagation**\n\nForward propagation is the process of feeding the input data through the network to obtain an output.  It involves the following steps:\n\n1.  **Input Layer:** The input data is fed into the input layer.\n2.  **Hidden Layers:**  For each neuron in each hidden layer:\n    *   Calculate the weighted sum of the inputs from the previous layer.\n    *   Apply the activation function to the weighted sum to produce the neuron's output.\n3.  **Output Layer:**  Repeat the process for the output layer to produce the network's prediction.\n\n**4. Loss Function (Cost Function)**\n\nThe loss function measures the difference between the network's predictions and the actual target values.  The goal of training is to minimize this loss. Common loss functions include:\n\n*   **Mean Squared Error (MSE):**  Used for regression problems. Calculates the average squared difference between the predicted and actual values.\n*   **Binary Cross-Entropy:** Used for binary classification problems.  Measures the dissimilarity between the predicted probability and the true label.\n*   **Categorical Cross-Entropy:** Used for multi-class classification problems.  Measures the dissimilarity between the predicted probability distribution and the true class label.\n\n**5. Backpropagation**\n\nBackpropagation is the process of calculating the gradients of the loss function with respect to the network's weights and biases.  These gradients indicate the direction and magnitude of change needed to reduce the loss.  It's essentially the chain rule of calculus applied to the neural network. The key steps are:\n\n1.  **Calculate the error at the output layer:**  Compare the network's output to the actual target values and calculate the loss.\n2.  **Propagate the error backward through the network:**  Using the chain rule, calculate the gradients of the loss function with respect to the weights and biases of each layer.\n3.  **Update the weights and biases:** Adjust the weights and biases in the direction that reduces the loss, using an optimization algorithm (e.g., gradient descent).\n\n**6. Optimization Algorithms**\n\nOptimization algorithms are used to update the weights and biases of the network during training. The most common algorithm is **Gradient Descent**, which iteratively adjusts the weights and biases in the direction of the negative gradient.  Variants of gradient descent include:\n\n*   **Batch Gradient Descent:**  Calculates the gradients using the entire training dataset in each iteration.  Slow for large datasets.\n*   **Stochastic Gradient Descent (SGD):**  Calculates the gradients using only one training example in each iteration.  Noisy but can converge faster.\n*   **Mini-Batch Gradient Descent:**  Calculates the gradients using a small batch of training examples in each iteration.  A good balance between speed and stability.\n*   **Adam, RMSprop, and other adaptive optimizers:** These algorithms adapt the learning rate for each weight and bias, often leading to faster and more stable convergence.\n\n**7. Training a Neural Network**\n\nThe training process involves repeatedly feeding the network with training data, calculating the loss, and updating the weights and biases using backpropagation and an optimization algorithm. This process is repeated for multiple epochs (iterations over the entire training dataset) until the network converges to a satisfactory level of performance.\n\n**8. Key Concepts and Challenges**\n\n*   **Overfitting:** The network learns the training data too well, resulting in poor performance on unseen data.  Techniques to mitigate overfitting include:\n    *   **Regularization (L1, L2):** Adds a penalty to the loss function based on the magnitude of the weights.\n    *   **Dropout:** Randomly drops out neurons during training, forcing the network to learn more robust features.\n    *   **Early Stopping:** Stops training when the performance on a validation set starts to degrade.\n    *   **Data Augmentation:** Increases the size of the training dataset by creating modified versions of existing data.\n*   **Vanishing/Exploding Gradients:**  The gradients can become very small or very large during backpropagation, making it difficult to train deep networks.  Techniques to mitigate this include:\n    *   **ReLU activation function:** Helps prevent vanishing gradients.\n    *   **Batch Normalization:** Normalizes the activations of each layer, improving training stability.\n    *   **Weight Initialization:**  Properly initializing the weights can help prevent exploding or vanishing gradients.\n*   **Hyperparameter Tuning:** The performance of a neural network is highly dependent on the choice of hyperparameters (e.g., learning rate, number of layers, number of neurons per layer, activation function).  Hyperparameter tuning is the process of finding the optimal values for these parameters.  Techniques include:\n    *   **Grid Search:**  Exhaustively searches over a predefined grid of hyperparameter values.\n    *   **Random Search:**  Randomly samples hyperparameter values from a predefined distribution.\n    *   **Bayesian Optimization:** Uses a probabilistic model to guide the search for optimal hyperparameters.\n*   **Computational Resources:** Training deep neural networks can be computationally expensive, requiring significant processing power and memory.\n\n**9. Types of Neural Networks**\n\n*   **Feedforward Neural Networks (FNNs):**  The simplest type of neural network, where data flows in one direction from the input layer to the output layer.\n*   **Convolutional Neural Networks (CNNs):**  Specifically designed for processing image data.  Use convolutional layers to extract features from images.\n*   **Recurrent Neural Networks (RNNs):**  Designed for processing sequential data (e.g., text, audio, time series).  Use recurrent connections to maintain a memory of past inputs.\n*   **Long Short-Term Memory (LSTM) Networks:** A type of RNN that is better at handling long-range dependencies in sequential data.\n*   **Generative Adversarial Networks (GANs):**  Consist of two networks: a generator that creates new data and a discriminator that tries to distinguish between real and generated data.  Used for generating realistic images, videos, and other types of data.\n*   **Transformers:**  A more recent type of neural network that is based on the attention mechanism.  Very effective for natural language processing tasks.\n\n**In Summary:**\n\nNeural networks are a powerful and versatile tool for machine learning. Understanding the underlying principles of neuron structure, network architecture, forward and backward propagation, and optimization algorithms is crucial for building and deploying effective neural network models.  The field is constantly evolving, with new architectures and techniques being developed all the time.  However, a solid grasp of the fundamentals will provide a strong foundation for staying current with advancements in this exciting field.\n"},
        ],
      },
    ],
  });
//   const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
//   console.log(result.response.text());
